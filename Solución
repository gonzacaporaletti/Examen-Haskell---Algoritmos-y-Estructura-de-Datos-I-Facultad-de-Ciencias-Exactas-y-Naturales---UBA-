--Ej 1
encontrarAlumno :: [(String, [Int])] -> String -> (String, [Int]) 
encontrarAlumno [x] a = x
encontrarAlumno ((x1, x2):xs) a | a == x1 = (x1, x2)
                                | otherwise = encontrarAlumno xs a  

notasDelAlumno::[(String, [Int])] -> String -> [Int]
notasDelAlumno (x:xs) a = snd (encontrarAlumno (x:xs) a)

cuantasMateriasAprobo:: [Int] -> Int
cuantasMateriasAprobo [] = 0
cuantasMateriasAprobo (x:xs) | x >= 4 = 1 + cuantasMateriasAprobo xs
                             | otherwise = cuantasMateriasAprobo xs

aproboMasDeNMaterias :: [(String, [Int])] -> String-> Int -> Bool
aproboMasDeNMaterias [] _ _ = False
aproboMasDeNMaterias (x:xs) a n | n < cuantasMateriasAprobo (notasDelAlumno (x:xs) a) = True 
                                | otherwise = False 

--Ej 2
cuantasNotas:: [Int] -> Int
cuantasNotas [] = 0
cuantasNotas (x:xs) = 1 + cuantasNotas xs

sumaDeNotas:: [Int] -> Int
sumaDeNotas [] = 0
sumaDeNotas (x:xs) = x + sumaDeNotas xs

promedio:: [Int] -> Float
promedio [] = 0
promedio (x:xs) = fromIntegral (sumaDeNotas (x:xs)) / fromIntegral (cuantasNotas (x:xs))

pertenece:: (Eq t) => t -> [t] -> Bool
pertenece x [] = False
pertenece x (y:ys) | x == y = True 
                   | otherwise = pertenece x ys

tieneAplazos:: [Int] -> Bool
tieneAplazos (x:xs) | pertenece 3 (x:xs) = True
                    | pertenece 2 (x:xs) = True
                    | pertenece 1 (x:xs) = True
                    | otherwise = False

buenosAlumnos:: [(String, [Int])] -> [String]
buenosAlumnos [] = []
buenosAlumnos ((x1, x2):xs) | promedio (notasDelAlumno ((x1, x2):xs) x1) >= 8.0 && tieneAplazos (notasDelAlumno ((x1, x2):xs) x1) == False = [x1] ++ buenosAlumnos xs
                            | otherwise = buenosAlumnos xs

--Ej 3
mejorPromedio::  [(String, [Int])] -> String
mejorPromedio [x] = fst x 
mejorPromedio ((x1, x2):(y1, y2): xs) | promedio (notasDelAlumno ((x1, x2):(y1, y2):xs) x1) >= promedio (notasDelAlumno ((x1, x2):(y1, y2):xs) y1) = mejorPromedio ((x1,x2):xs)
                                      | otherwise = mejorPromedio ((y1,y2):xs)

--Ej 4
seGraduoConHonores :: [(String, [Int])] -> Int -> String -> Bool
seGraduoConHonores ((x1, x2):xs) n c| (aproboMasDeNMaterias ((x1, x2):xs) c (n-1)) && (pertenece c (buenosAlumnos ((x1, x2):xs))) && (promedio (notasDelAlumno ((x1, x2):xs) c) - promedio ((notasDelAlumno ((x1, x2):xs) (mejorPromedio ((x1, x2):xs)))) < 1)= True
                                    | otherwise = False
